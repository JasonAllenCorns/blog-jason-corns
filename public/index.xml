<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jason Corns&#39; blog...</title>
    <link>http://www.jasoncorns.com/</link>
    <description>Recent content on Jason Corns&#39; blog...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved, 2011-2018</copyright>
    <lastBuildDate>Mon, 16 Aug 2010 20:08:33 -0800</lastBuildDate>
    
	<atom:link href="http://www.jasoncorns.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Semantic Css Establishing a Visual Outline</title>
      <link>http://www.jasoncorns.com/2010/08/semantic-css-visual-outline/</link>
      <pubDate>Mon, 16 Aug 2010 20:08:33 -0800</pubDate>
      
      <guid>http://www.jasoncorns.com/2010/08/semantic-css-visual-outline/</guid>
      <description>Let&amp;rsquo;s move beyond simply linting our code, and delve into creating a visual outline of our CSS. Anyone who writes code, anything from simple UI shifts through complex exotic joins, inherits a responsibility to write reasonable code. Good code solves a problem or answers a question; well-written code lives on, open and accessible to future developers.
Before we begin, let me say that the delivered stylesheet should be minified and free of excess spaces, tabs, semicolons and lengths of 0px instead of “0″, using tools like the YUI compressor or the CSS Drive Online CSS Compression Utility.</description>
    </item>
    
    <item>
      <title>Jason vs. Anchor Tags – Getting Results with the preventDefault method</title>
      <link>http://www.jasoncorns.com/2010/05/jason-vs.-anchor-tags--getting-results-with-the-preventdefault-method/</link>
      <pubDate>Thu, 13 May 2010 18:22:49 -0800</pubDate>
      
      <guid>http://www.jasoncorns.com/2010/05/jason-vs.-anchor-tags--getting-results-with-the-preventdefault-method/</guid>
      <description>In another post, Jason vs. Page Weight – Accessibility Series, pt. 2, I talked about a solving page weight problem I had with a client. In the end, the client decided to put a lot of data on a single page. In my opinion, this would have been a great time to use AJAX to pull in the data rather than just pushing it all to the page at load. The problem with AJAX is that it relies on JavaScript (reliance may, in fact, be too weak a term, honestly) and so would not have been ideal for search engines and would not have provided accessible page content.</description>
    </item>
    
    <item>
      <title>Jason vs. Page Weight – Accessibility Series, pt. 2</title>
      <link>http://www.jasoncorns.com/2010/04/page-weight-accessibility-part-2/</link>
      <pubDate>Mon, 26 Apr 2010 16:43:23 -0800</pubDate>
      
      <guid>http://www.jasoncorns.com/2010/04/page-weight-accessibility-part-2/</guid>
      <description>&lt;p&gt;When the topic of Web Accessibility arises, I immediately think of a standard set of keywords: ADA/508 compliance, information architecture, JavaScript, well-formed HTML, ALT text, etc&amp;hellip;  This list represents the things that, as I have been taught over the past few years, have significant impact on the accessibility of a page and a site.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Accessibility Series, pt. 1</title>
      <link>http://www.jasoncorns.com/2010/04/accessibility-part-1/</link>
      <pubDate>Tue, 13 Apr 2010 20:21:11 -0800</pubDate>
      
      <guid>http://www.jasoncorns.com/2010/04/accessibility-part-1/</guid>
      <description>Usability is finally starting to bubble to the top for Web Designers and Information Architects. We are, as an industry, starting to realize that our audience exists outside of Photoshop canvas and beyond the code. In fact, I have witnessed an increased focus on JavaScript degradation over the past few months – an unspoken admission that we, as web design professionals, should and shall provide web content to users of all browsing backgrounds and capabilities.</description>
    </item>
    
  </channel>
</rss>